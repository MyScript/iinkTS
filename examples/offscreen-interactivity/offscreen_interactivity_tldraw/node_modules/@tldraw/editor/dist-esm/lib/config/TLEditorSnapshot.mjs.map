{
  "version": 3,
  "sources": ["../../../src/lib/config/TLEditorSnapshot.ts"],
  "sourcesContent": ["import { Signal } from '@tldraw/state'\nimport { TLINSTANCE_ID, TLStore, TLStoreSnapshot, pluckPreservingValues } from '@tldraw/tlschema'\nimport { WeakCache, filterEntries } from '@tldraw/utils'\nimport {\n\tTLSessionStateSnapshot,\n\tcreateSessionStateSnapshotSignal,\n\tloadSessionStateSnapshotIntoStore,\n} from './TLSessionStateSnapshot'\n\n/** @public */\nexport interface TLEditorSnapshot {\n\tdocument: TLStoreSnapshot\n\tsession: TLSessionStateSnapshot\n}\n\n/**\n * Options for {@link loadSnapshot}\n * @public\n */\nexport interface TLLoadSnapshotOptions {\n\t/**\n\t * By default, some session state flags like `isDebugMode` are not overwritten when loading a snapshot.\n\t * These are usually considered \"sticky\" by users while the document data is not.\n\t * If you want to overwrite these flags, set this to `true`.\n\t */\n\tforceOverwriteSessionState?: boolean\n}\n\n/**\n * Loads a snapshot into a store.\n * @public\n */\nexport function loadSnapshot(\n\tstore: TLStore,\n\t_snapshot: Partial<TLEditorSnapshot> | TLStoreSnapshot,\n\topts?: TLLoadSnapshotOptions\n) {\n\tlet snapshot: Partial<TLEditorSnapshot> = {}\n\tif ('store' in _snapshot) {\n\t\t// regular old TLStoreSnapshot\n\t\t// let's migrate it and then filter out the non-doc state to help folks out\n\t\tconst migrationResult = store.schema.migrateStoreSnapshot(_snapshot)\n\t\tif (migrationResult.type !== 'success') {\n\t\t\tthrow new Error('Failed to migrate store snapshot: ' + migrationResult.reason)\n\t\t}\n\n\t\tsnapshot.document = {\n\t\t\tschema: store.schema.serialize(),\n\t\t\tstore: filterEntries(migrationResult.value, (_, { typeName }) =>\n\t\t\t\tstore.scopedTypes.document.has(typeName)\n\t\t\t),\n\t\t}\n\t} else {\n\t\t// TLEditorSnapshot\n\t\tsnapshot = _snapshot\n\t}\n\n\t// We need to preserve a bunch of instance state properties that the Editor sets\n\t// to avoid breaking the editor or causing jarring changes when loading a snapshot.\n\tconst preservingInstanceState = pluckPreservingValues(store.get(TLINSTANCE_ID))\n\tconst preservingSessionState = sessionStateCache\n\t\t.get(store, createSessionStateSnapshotSignal)\n\t\t.get()\n\n\tstore.atomic(() => {\n\t\t// first load the document state (this will wipe the store if it happens)\n\t\tif (snapshot.document) {\n\t\t\tstore.loadStoreSnapshot(snapshot.document)\n\t\t}\n\n\t\t// then make sure we preserve those instance state properties that must be preserved\n\t\t// this is a noop if the document state wasn't loaded above\n\t\tif (preservingInstanceState) {\n\t\t\tstore.update(TLINSTANCE_ID, (r) => ({ ...r, ...preservingInstanceState }))\n\t\t}\n\t\tif (preservingSessionState) {\n\t\t\t// there's some duplication here with the instanceState but it's fine\n\t\t\tloadSessionStateSnapshotIntoStore(store, preservingSessionState)\n\t\t}\n\n\t\t// finally reinstate the UI state\n\t\tif (snapshot.session) {\n\t\t\tloadSessionStateSnapshotIntoStore(store, snapshot.session, {\n\t\t\t\tforceOverwrite: opts?.forceOverwriteSessionState,\n\t\t\t})\n\t\t}\n\t})\n}\n\nconst sessionStateCache = new WeakCache<\n\tTLStore,\n\tSignal<TLSessionStateSnapshot | undefined | null>\n>()\n\n/** @public */\nexport function getSnapshot(store: TLStore): TLEditorSnapshot {\n\tconst sessionState$ = sessionStateCache.get(store, createSessionStateSnapshotSignal)\n\tconst session = sessionState$.get()\n\tif (!session) {\n\t\tthrow new Error('Session state is not ready yet')\n\t}\n\n\treturn {\n\t\tdocument: store.getStoreSnapshot(),\n\t\tsession,\n\t}\n}\n"],
  "mappings": "AACA,SAAS,eAAyC,6BAA6B;AAC/E,SAAS,WAAW,qBAAqB;AACzC;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AAyBA,SAAS,aACf,OACA,WACA,MACC;AACD,MAAI,WAAsC,CAAC;AAC3C,MAAI,WAAW,WAAW;AAGzB,UAAM,kBAAkB,MAAM,OAAO,qBAAqB,SAAS;AACnE,QAAI,gBAAgB,SAAS,WAAW;AACvC,YAAM,IAAI,MAAM,uCAAuC,gBAAgB,MAAM;AAAA,IAC9E;AAEA,aAAS,WAAW;AAAA,MACnB,QAAQ,MAAM,OAAO,UAAU;AAAA,MAC/B,OAAO;AAAA,QAAc,gBAAgB;AAAA,QAAO,CAAC,GAAG,EAAE,SAAS,MAC1D,MAAM,YAAY,SAAS,IAAI,QAAQ;AAAA,MACxC;AAAA,IACD;AAAA,EACD,OAAO;AAEN,eAAW;AAAA,EACZ;AAIA,QAAM,0BAA0B,sBAAsB,MAAM,IAAI,aAAa,CAAC;AAC9E,QAAM,yBAAyB,kBAC7B,IAAI,OAAO,gCAAgC,EAC3C,IAAI;AAEN,QAAM,OAAO,MAAM;AAElB,QAAI,SAAS,UAAU;AACtB,YAAM,kBAAkB,SAAS,QAAQ;AAAA,IAC1C;AAIA,QAAI,yBAAyB;AAC5B,YAAM,OAAO,eAAe,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG,wBAAwB,EAAE;AAAA,IAC1E;AACA,QAAI,wBAAwB;AAE3B,wCAAkC,OAAO,sBAAsB;AAAA,IAChE;AAGA,QAAI,SAAS,SAAS;AACrB,wCAAkC,OAAO,SAAS,SAAS;AAAA,QAC1D,gBAAgB,MAAM;AAAA,MACvB,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF;AAEA,MAAM,oBAAoB,IAAI,UAG5B;AAGK,SAAS,YAAY,OAAkC;AAC7D,QAAM,gBAAgB,kBAAkB,IAAI,OAAO,gCAAgC;AACnF,QAAM,UAAU,cAAc,IAAI;AAClC,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,MAAM,gCAAgC;AAAA,EACjD;AAEA,SAAO;AAAA,IACN,UAAU,MAAM,iBAAiB;AAAA,IACjC;AAAA,EACD;AACD;",
  "names": []
}
