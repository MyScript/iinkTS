"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  DEFAULT_SUPPORTED_IMAGE_TYPES: () => import_media.DEFAULT_SUPPORTED_IMAGE_TYPES,
  DEFAULT_SUPPORTED_MEDIA_TYPE_LIST: () => import_media.DEFAULT_SUPPORTED_MEDIA_TYPE_LIST,
  DEFAULT_SUPPORT_VIDEO_TYPES: () => import_media.DEFAULT_SUPPORT_VIDEO_TYPES,
  ExecutionQueue: () => import_ExecutionQueue.ExecutionQueue,
  FileHelpers: () => import_file.FileHelpers,
  Image: () => import_network.Image,
  MediaHelpers: () => import_media.MediaHelpers,
  PerformanceTracker: () => import_PerformanceTracker.PerformanceTracker,
  PngHelpers: () => import_png.PngHelpers,
  Result: () => import_control.Result,
  STRUCTURED_CLONE_OBJECT_PROTOTYPE: () => import_value.STRUCTURED_CLONE_OBJECT_PROTOTYPE,
  Timers: () => import_timers.Timers,
  WeakCache: () => import_cache.WeakCache,
  ZERO_INDEX_KEY: () => import_reordering.ZERO_INDEX_KEY,
  annotateError: () => import_error.annotateError,
  areArraysShallowEqual: () => import_array.areArraysShallowEqual,
  areObjectsShallowEqual: () => import_object.areObjectsShallowEqual,
  assert: () => import_control.assert,
  assertExists: () => import_control.assertExists,
  bind: () => import_bind.bind,
  clearLocalStorage: () => import_storage.clearLocalStorage,
  clearSessionStorage: () => import_storage.clearSessionStorage,
  compact: () => import_array.compact,
  debounce: () => import_debounce.debounce,
  dedupe: () => import_array.dedupe,
  deleteFromLocalStorage: () => import_storage.deleteFromLocalStorage,
  deleteFromSessionStorage: () => import_storage.deleteFromSessionStorage,
  exhaustiveSwitchError: () => import_control.exhaustiveSwitchError,
  fetch: () => import_network.fetch,
  filterEntries: () => import_object.filterEntries,
  fpsThrottle: () => import_throttle.fpsThrottle,
  getErrorAnnotations: () => import_error.getErrorAnnotations,
  getFirstFromIterable: () => import_iterable.getFirstFromIterable,
  getFromLocalStorage: () => import_storage.getFromLocalStorage,
  getFromSessionStorage: () => import_storage.getFromSessionStorage,
  getHashForBuffer: () => import_hash.getHashForBuffer,
  getHashForObject: () => import_hash.getHashForObject,
  getHashForString: () => import_hash.getHashForString,
  getIndexAbove: () => import_reordering.getIndexAbove,
  getIndexBelow: () => import_reordering.getIndexBelow,
  getIndexBetween: () => import_reordering.getIndexBetween,
  getIndices: () => import_reordering.getIndices,
  getIndicesAbove: () => import_reordering.getIndicesAbove,
  getIndicesBelow: () => import_reordering.getIndicesBelow,
  getIndicesBetween: () => import_reordering.getIndicesBetween,
  getOwnProperty: () => import_object.getOwnProperty,
  groupBy: () => import_object.groupBy,
  hasOwnProperty: () => import_object.hasOwnProperty,
  invLerp: () => import_number.invLerp,
  isDefined: () => import_value.isDefined,
  isNativeStructuredClone: () => import_value.isNativeStructuredClone,
  isNonNull: () => import_value.isNonNull,
  isNonNullish: () => import_value.isNonNullish,
  last: () => import_array.last,
  lerp: () => import_number.lerp,
  lns: () => import_hash.lns,
  mapObjectMapValues: () => import_object.mapObjectMapValues,
  maxBy: () => import_array.maxBy,
  measureAverageDuration: () => import_perf.measureAverageDuration,
  measureCbDuration: () => import_perf.measureCbDuration,
  measureDuration: () => import_perf.measureDuration,
  minBy: () => import_array.minBy,
  mockUniqueId: () => import_id.mockUniqueId,
  modulate: () => import_number.modulate,
  noop: () => import_function.noop,
  objectMapEntries: () => import_object.objectMapEntries,
  objectMapFromEntries: () => import_object.objectMapFromEntries,
  objectMapKeys: () => import_object.objectMapKeys,
  objectMapValues: () => import_object.objectMapValues,
  omitFromStackTrace: () => import_function.omitFromStackTrace,
  partition: () => import_array.partition,
  promiseWithResolve: () => import_control.promiseWithResolve,
  registerTldrawLibraryVersion: () => import_version2.registerTldrawLibraryVersion,
  restoreUniqueId: () => import_id.restoreUniqueId,
  retry: () => import_retry.retry,
  rng: () => import_number.rng,
  rotateArray: () => import_array.rotateArray,
  safeParseUrl: () => import_url.safeParseUrl,
  setInLocalStorage: () => import_storage.setInLocalStorage,
  setInSessionStorage: () => import_storage.setInSessionStorage,
  sleep: () => import_control.sleep,
  sortById: () => import_sort.sortById,
  sortByIndex: () => import_reordering.sortByIndex,
  stringEnum: () => import_stringEnum.stringEnum,
  structuredClone: () => import_value.structuredClone,
  throttle: () => import_lodash.default,
  throttleToNextFrame: () => import_throttle.throttleToNextFrame,
  uniq: () => import_lodash2.default,
  uniqueId: () => import_id.uniqueId,
  validateIndexKey: () => import_reordering.validateIndexKey,
  warnDeprecatedGetter: () => import_warn.warnDeprecatedGetter,
  warnOnce: () => import_warn.warnOnce
});
module.exports = __toCommonJS(src_exports);
var import_version = require("./lib/version");
var import_lodash = __toESM(require("lodash.throttle"));
var import_lodash2 = __toESM(require("lodash.uniq"));
var import_ExecutionQueue = require("./lib/ExecutionQueue");
var import_PerformanceTracker = require("./lib/PerformanceTracker");
var import_array = require("./lib/array");
var import_bind = require("./lib/bind");
var import_cache = require("./lib/cache");
var import_control = require("./lib/control");
var import_debounce = require("./lib/debounce");
var import_error = require("./lib/error");
var import_file = require("./lib/file");
var import_function = require("./lib/function");
var import_hash = require("./lib/hash");
var import_id = require("./lib/id");
var import_iterable = require("./lib/iterable");
var import_media = require("./lib/media/media");
var import_png = require("./lib/media/png");
var import_network = require("./lib/network");
var import_number = require("./lib/number");
var import_object = require("./lib/object");
var import_perf = require("./lib/perf");
var import_reordering = require("./lib/reordering");
var import_retry = require("./lib/retry");
var import_sort = require("./lib/sort");
var import_storage = require("./lib/storage");
var import_stringEnum = require("./lib/stringEnum");
var import_throttle = require("./lib/throttle");
var import_timers = require("./lib/timers");
var import_url = require("./lib/url");
var import_value = require("./lib/value");
var import_version2 = require("./lib/version");
var import_warn = require("./lib/warn");
(0, import_version.registerTldrawLibraryVersion)(
  "@tldraw/utils",
  "3.7.0",
  "cjs"
);
//# sourceMappingURL=index.js.map
