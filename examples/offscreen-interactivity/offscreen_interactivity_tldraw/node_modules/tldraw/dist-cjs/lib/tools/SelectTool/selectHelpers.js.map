{
  "version": 3,
  "sources": ["../../../../src/lib/tools/SelectTool/selectHelpers.ts"],
  "sourcesContent": ["import {\n\tEditor,\n\tGeometry2d,\n\tMat,\n\tTLShape,\n\tTLShapeId,\n\tVec,\n\tcompact,\n\tpointInPolygon,\n\tpolygonIntersectsPolyline,\n\tpolygonsIntersect,\n} from '@tldraw/editor'\n\n/** @internal */\nexport function kickoutOccludedShapes(editor: Editor, shapeIds: TLShapeId[]) {\n\t// const shapes = shapeIds.map((id) => editor.getShape(id)).filter((s) => s) as TLShape[]\n\tconst parentsToCheck = new Set<TLShape>()\n\tfor (const id of shapeIds) {\n\t\t// If the shape exists and the shape has an onDragShapesOut\n\t\t// function, add it to the set\n\t\tconst shape = editor.getShape(id)\n\t\tif (!shape) continue\n\t\tif (editor.getShapeUtil(shape).onDragShapesOut) {\n\t\t\tparentsToCheck.add(shape)\n\t\t}\n\t\t// If the shape's parent is a shape and the shape's parent\n\t\t// has an onDragShapesOut function, add it to the set\n\t\tconst parent = editor.getShape(shape.parentId)\n\t\tif (!parent) continue\n\t\tif (editor.getShapeUtil(parent).onDragShapesOut) {\n\t\t\tparentsToCheck.add(parent)\n\t\t}\n\t}\n\n\tconst parentsWithKickedOutChildren = new Map<TLShape, TLShapeId[]>()\n\n\tfor (const parent of parentsToCheck) {\n\t\tconst occludedChildren = getOccludedChildren(editor, parent)\n\t\tif (occludedChildren.length) {\n\t\t\tparentsWithKickedOutChildren.set(parent, occludedChildren)\n\t\t}\n\t}\n\n\t// now call onDragShapesOut for each parent\n\tfor (const [parent, kickedOutChildrenIds] of parentsWithKickedOutChildren) {\n\t\tconst shapeUtil = editor.getShapeUtil(parent)\n\t\tconst kickedOutChildren = compact(kickedOutChildrenIds.map((id) => editor.getShape(id)))\n\t\tshapeUtil.onDragShapesOut?.(parent, kickedOutChildren)\n\t}\n}\n\n/** @public */\nexport function getOccludedChildren(editor: Editor, parent: TLShape) {\n\tconst childIds = editor.getSortedChildIdsForParent(parent.id)\n\tif (childIds.length === 0) return []\n\tconst parentPageBounds = editor.getShapePageBounds(parent)\n\tif (!parentPageBounds) return []\n\n\tlet parentGeometry: Geometry2d | undefined\n\tlet parentPageTransform: Mat | undefined\n\tlet parentPageCorners: Vec[] | undefined\n\n\tconst results: TLShapeId[] = []\n\n\tfor (const childId of childIds) {\n\t\tconst shapePageBounds = editor.getShapePageBounds(childId)\n\t\tif (!shapePageBounds) {\n\t\t\t// Not occluded, shape doesn't exist\n\t\t\tcontinue\n\t\t}\n\n\t\tif (!parentPageBounds.includes(shapePageBounds)) {\n\t\t\t// Not in shape's bounds, shape is occluded\n\t\t\tresults.push(childId)\n\t\t\tcontinue\n\t\t}\n\n\t\t// There might be a lot of children; we don't want to do this for all of them,\n\t\t// but we also don't want to do it at all if we don't have to. ??= to the rescue!\n\n\t\tparentGeometry ??= editor.getShapeGeometry(parent)\n\t\tparentPageTransform ??= editor.getShapePageTransform(parent)\n\t\tparentPageCorners ??= parentPageTransform.applyToPoints(parentGeometry.vertices)\n\n\t\tconst parentCornersInShapeSpace = editor\n\t\t\t.getShapePageTransform(childId)\n\t\t\t.clone()\n\t\t\t.invert()\n\t\t\t.applyToPoints(parentPageCorners)\n\n\t\t// If any of the shape's vertices are inside the occluder, it's not occluded\n\t\tconst { vertices, isClosed } = editor.getShapeGeometry(childId)\n\n\t\tif (vertices.some((v) => pointInPolygon(v, parentCornersInShapeSpace))) {\n\t\t\t// not occluded, vertices are in the occluder's corners\n\t\t\tcontinue\n\t\t}\n\n\t\t// If any the shape's vertices intersect the edge of the occluder, it's not occluded\n\t\tif (isClosed) {\n\t\t\tif (polygonsIntersect(parentCornersInShapeSpace, vertices)) {\n\t\t\t\t// not occluded, vertices intersect parent's corners\n\t\t\t\tcontinue\n\t\t\t}\n\t\t} else if (polygonIntersectsPolyline(parentCornersInShapeSpace, vertices)) {\n\t\t\t// not occluded, vertices intersect parent's corners\n\t\t\tcontinue\n\t\t}\n\n\t\t// Passed all checks, shape is occluded\n\t\tresults.push(childId)\n\t}\n\n\treturn results\n}\n\n/** @internal */\nexport function startEditingShapeWithLabel(editor: Editor, shape: TLShape, selectAll = false) {\n\t// Finish this shape and start editing the next one\n\teditor.select(shape)\n\teditor.setEditingShape(shape)\n\teditor.setCurrentTool('select.editing_shape', {\n\t\ttarget: 'shape',\n\t\tshape: shape,\n\t})\n\tif (selectAll) {\n\t\teditor.emit('select-all-text', { shapeId: shape.id })\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWO;AAGA,SAAS,sBAAsB,QAAgB,UAAuB;AAE5E,QAAM,iBAAiB,oBAAI,IAAa;AACxC,aAAW,MAAM,UAAU;AAG1B,UAAM,QAAQ,OAAO,SAAS,EAAE;AAChC,QAAI,CAAC,MAAO;AACZ,QAAI,OAAO,aAAa,KAAK,EAAE,iBAAiB;AAC/C,qBAAe,IAAI,KAAK;AAAA,IACzB;AAGA,UAAM,SAAS,OAAO,SAAS,MAAM,QAAQ;AAC7C,QAAI,CAAC,OAAQ;AACb,QAAI,OAAO,aAAa,MAAM,EAAE,iBAAiB;AAChD,qBAAe,IAAI,MAAM;AAAA,IAC1B;AAAA,EACD;AAEA,QAAM,+BAA+B,oBAAI,IAA0B;AAEnE,aAAW,UAAU,gBAAgB;AACpC,UAAM,mBAAmB,oBAAoB,QAAQ,MAAM;AAC3D,QAAI,iBAAiB,QAAQ;AAC5B,mCAA6B,IAAI,QAAQ,gBAAgB;AAAA,IAC1D;AAAA,EACD;AAGA,aAAW,CAAC,QAAQ,oBAAoB,KAAK,8BAA8B;AAC1E,UAAM,YAAY,OAAO,aAAa,MAAM;AAC5C,UAAM,wBAAoB,uBAAQ,qBAAqB,IAAI,CAAC,OAAO,OAAO,SAAS,EAAE,CAAC,CAAC;AACvF,cAAU,kBAAkB,QAAQ,iBAAiB;AAAA,EACtD;AACD;AAGO,SAAS,oBAAoB,QAAgB,QAAiB;AACpE,QAAM,WAAW,OAAO,2BAA2B,OAAO,EAAE;AAC5D,MAAI,SAAS,WAAW,EAAG,QAAO,CAAC;AACnC,QAAM,mBAAmB,OAAO,mBAAmB,MAAM;AACzD,MAAI,CAAC,iBAAkB,QAAO,CAAC;AAE/B,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,QAAM,UAAuB,CAAC;AAE9B,aAAW,WAAW,UAAU;AAC/B,UAAM,kBAAkB,OAAO,mBAAmB,OAAO;AACzD,QAAI,CAAC,iBAAiB;AAErB;AAAA,IACD;AAEA,QAAI,CAAC,iBAAiB,SAAS,eAAe,GAAG;AAEhD,cAAQ,KAAK,OAAO;AACpB;AAAA,IACD;AAKA,uBAAmB,OAAO,iBAAiB,MAAM;AACjD,4BAAwB,OAAO,sBAAsB,MAAM;AAC3D,0BAAsB,oBAAoB,cAAc,eAAe,QAAQ;AAE/E,UAAM,4BAA4B,OAChC,sBAAsB,OAAO,EAC7B,MAAM,EACN,OAAO,EACP,cAAc,iBAAiB;AAGjC,UAAM,EAAE,UAAU,SAAS,IAAI,OAAO,iBAAiB,OAAO;AAE9D,QAAI,SAAS,KAAK,CAAC,UAAM,8BAAe,GAAG,yBAAyB,CAAC,GAAG;AAEvE;AAAA,IACD;AAGA,QAAI,UAAU;AACb,cAAI,iCAAkB,2BAA2B,QAAQ,GAAG;AAE3D;AAAA,MACD;AAAA,IACD,eAAW,yCAA0B,2BAA2B,QAAQ,GAAG;AAE1E;AAAA,IACD;AAGA,YAAQ,KAAK,OAAO;AAAA,EACrB;AAEA,SAAO;AACR;AAGO,SAAS,2BAA2B,QAAgB,OAAgB,YAAY,OAAO;AAE7F,SAAO,OAAO,KAAK;AACnB,SAAO,gBAAgB,KAAK;AAC5B,SAAO,eAAe,wBAAwB;AAAA,IAC7C,QAAQ;AAAA,IACR;AAAA,EACD,CAAC;AACD,MAAI,WAAW;AACd,WAAO,KAAK,mBAAmB,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,EACrD;AACD;",
  "names": []
}
