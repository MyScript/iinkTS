import { jsx } from "react/jsx-runtime";
import { defaultUserPreferences, track, useMaybeEditor } from "@tldraw/editor";
import { useDefaultUiAssetUrlsWithOverrides } from "../assetUrls.mjs";
import { MimeTypeContext } from "../hooks/useInsertMedia.mjs";
import { ToolsProvider } from "../hooks/useTools.mjs";
import { TldrawUiTranslationProvider } from "../hooks/useTranslation/useTranslation.mjs";
import { useMergedOverrides, useMergedTranslationOverrides } from "../overrides.mjs";
import { ActionsProvider } from "./actions.mjs";
import { AssetUrlsProvider } from "./asset-urls.mjs";
import { BreakPointProvider } from "./breakpoints.mjs";
import { TldrawUiComponentsProvider } from "./components.mjs";
import { TldrawUiDialogsProvider } from "./dialogs.mjs";
import { TldrawUiEventsProvider } from "./events.mjs";
import { TldrawUiToastsProvider } from "./toasts.mjs";
const TldrawUiContextProvider = track(function TldrawUiContextProvider2({
  overrides,
  components,
  assetUrls,
  onUiEvent,
  forceMobile,
  mediaMimeTypes,
  children
}) {
  const editor = useMaybeEditor();
  return (
    /* @__PURE__ */ jsx(MimeTypeContext.Provider, { value: mediaMimeTypes, children: /* @__PURE__ */ jsx(AssetUrlsProvider, { assetUrls: useDefaultUiAssetUrlsWithOverrides(assetUrls), children: /* @__PURE__ */ jsx(
      TldrawUiTranslationProvider,
      {
        overrides: useMergedTranslationOverrides(overrides),
        locale: editor?.user.getLocale() ?? defaultUserPreferences.locale,
        children: /* @__PURE__ */ jsx(TldrawUiEventsProvider, { onEvent: onUiEvent, children: /* @__PURE__ */ jsx(TldrawUiToastsProvider, { children: /* @__PURE__ */ jsx(TldrawUiDialogsProvider, { context: editor?.contextId, children: /* @__PURE__ */ jsx(BreakPointProvider, { forceMobile, children: /* @__PURE__ */ jsx(TldrawUiComponentsProvider, { overrides: components, children: editor ? (
          // the internal providers are only valid when an editor is present
          /* @__PURE__ */ (jsx(InternalProviders, { overrides, children }))
        ) : children }) }) }) }) })
      }
    ) }) })
  );
});
function InternalProviders({
  overrides,
  children
}) {
  const mergedOverrides = useMergedOverrides(overrides);
  return /* @__PURE__ */ jsx(ActionsProvider, { overrides: mergedOverrides.actions, children: /* @__PURE__ */ jsx(ToolsProvider, { overrides: mergedOverrides.tools, children }) });
}
export {
  TldrawUiContextProvider
};
//# sourceMappingURL=TldrawUiContextProvider.mjs.map
